//Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.








class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
       sort(nums.begin(),nums.end());
       vector<vector<int>>ans;
       for(int i=0;i<nums.size();i++)
       {
           for(int j=i+1;j<nums.size();j++)
           {
               long long sum = (long long)target-nums[i]-nums[j];
               int l=j+1,r=nums.size()-1;
               while(l<r)
               {
                   if(nums[l]+nums[r]==sum)
                   {
                       vector<int>temp={nums[i],nums[j],nums[l],nums[r]};
                       if(ans.size()==0)ans.push_back(temp);
                       else{
                           bool falg=true;
                           for(int i=0;i<ans.size();i++)
                           {
                               if(ans[i]==temp)
                               {
                                   falg=false;
                                   break;
                               }
                           }
                           if(falg)ans.push_back(temp);
                       }
                       l++;
                       r--;
                   }
                   else if(nums[l]+nums[r]<sum)l++;
                   else r--;
               }
           }
       }
       return ans; 
    }
};