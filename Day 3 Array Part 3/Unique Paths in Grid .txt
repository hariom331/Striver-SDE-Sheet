//There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.





class Solution {
public:
    int uniquePaths(int m, int n) {
        m--;n--;
        //if(m==0 && n==0)return 0;
        //if(m==1 || n==1)return 1;
        //return uniquePaths(m-1,n)+uniquePaths(m,n-1);
        int t[m+1][n+1];
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0 || j==0)t[i][j]=1;
            }
        }
        t[0][0]=1;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                t[i][j]=t[i-1][j]+t[i][j-1];
            }
        }
        return t[m][n];
    }
};