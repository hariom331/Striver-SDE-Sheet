Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 










 class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        int n=0;
        ListNode* t=head;
        while(t)
        {
            t=t->next;
            n++;
            if(n==k)break;
        }
        if(n!=k)return head;
        ListNode* current = head;
        ListNode *prev = NULL, *next = NULL;
 
        while (current != t) {
            // Store next
            next = current->next;
            // Reverse current node's pointer
            current->next = prev;
            // Move pointers one position ahead.
            prev = current;
            current = next;
        }
        if(t==NULL)return prev;
        head->next=reverseKGroup(t,k);
        return prev;
    }
};