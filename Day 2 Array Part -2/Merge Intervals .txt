Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].






class Solution {
public:
    static bool comp(vector<int>&a, vector<int>&b)
    {
        if(a[0]==b[0])return a[1]<b[1];
        return a[0]<b[0];
    }
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n=intervals.size();
        sort(intervals.begin(),intervals.end(),comp);
        vector<vector<int>>ans;
        vector<int>temp;
        int last = intervals[0][1];
        temp.push_back(intervals[0][0]);
        for(int i=1;i<intervals.size();i++)
        {
            vector<int>t=intervals[i];
            if(t[1]<= last)continue;
            if(t[0] <= last)
            {
                last=t[1];
                continue;
            }
            temp.push_back(last);
            ans.push_back(temp);
            temp.pop_back();
            temp.pop_back();
            temp.push_back(t[0]);
            last= t[1];
        }
        temp.push_back(last);
        ans.push_back(temp);
        return ans;
    }
};